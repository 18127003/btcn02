{"version":3,"sources":["constant.ts","util.ts","component/Square.tsx","component/Board.tsx","component/HistoryList.tsx","component/Game.tsx","index.tsx"],"names":["DRAW","hasConsecutive","arr","cons","pad","from","length","result","prevElement","undefined","count","i","push","Square","props","className","onClick","isHighlight","value","id","Board","renderSquare","row","col","size","squares","winner","includes","generateRow","rowData","Array","fill","boardData","generateBoard","HistoryList","data","onSelect","selected","useState","isReverse","setReverse","moves","map","step","stepNumber","move","position","desc","style","fontWeight","reverse","Game","status","winCriteria","histories","setHistories","xIsNext","currentStep","setCurrentStep","handleClick","modifiedHistories","slice","current","currentPlayer","checkRow","v","filter","n","line","checkCol","checkLeftDiag","Math","abs","checkRightDiag","every","square","calculateWinner","find","history","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a05bd6d.chunk.js","sourcesContent":["export const DRAW = \"DRAW\";\r\nexport const PLAYER_X = \"X\";\r\nexport const PLAYER_O = \"O\";","import { DRAW, PLAYER_X } from \"./constant\";\r\n\r\nexport const hasConsecutive = (arr: number[], cons: number, pad: number, from?: number) => {\r\n    if (cons > arr.length){\r\n        return undefined;\r\n    }\r\n    let result: number[] = [];\r\n    let prevElement: number|undefined = undefined;\r\n    let count:number = 1;\r\n    const startIndex = from??0;\r\n    for (let i = startIndex; i < arr.length; i++) {\r\n        if(prevElement === arr[i]-pad){\r\n            count++;\r\n            result.push(arr[i])\r\n            if (count === cons) {\r\n                return result;\r\n            };\r\n        } else {\r\n            count = 1;\r\n            result = [arr[i]]\r\n        }\r\n        prevElement = arr[i];\r\n    };\r\n    return undefined;\r\n}\r\n\r\nexport const calculateWinner = (squares:(string|null)[], row: number, col:number, size: number, winCriteria: number): Result|undefined => {\r\n    let winner:number[]|undefined;\r\n    const currentPlayer = squares[row * size + col]??PLAYER_X\r\n\r\n    // check row\r\n    let checkRow = Array<number>(size).fill(0).map((v, i)=>v = row * size + i)\r\n      .filter(n=>squares[n]===currentPlayer)\r\n\r\n    winner = hasConsecutive(checkRow, winCriteria, 1)\r\n    if(winner) {\r\n      return {\r\n        result: currentPlayer,\r\n        line: winner\r\n      };\r\n    }\r\n\r\n    // check col \r\n    let checkCol = Array<number>(size).fill(0).map((v, i)=>v = col + i * size)\r\n      .filter(n=>squares[n]===currentPlayer)\r\n\r\n    winner = hasConsecutive(checkCol, winCriteria, size)\r\n    if(winner) {\r\n      return {\r\n        result: currentPlayer,\r\n        line: winner\r\n      };\r\n    }\r\n\r\n    // check diag\r\n    let checkLeftDiag = Array<number>(size-Math.abs(row-col)).fill(0)\r\n    if (col < row){\r\n      checkLeftDiag = checkLeftDiag.map((v,i) => v = (i + row - col) * size + i)\r\n    } else{\r\n      checkLeftDiag = checkLeftDiag.map((v,i) => v = i * size + i + col - row)\r\n    }\r\n    checkLeftDiag = checkLeftDiag.filter(n=>squares[n]===currentPlayer)\r\n\r\n    winner = hasConsecutive(checkLeftDiag, winCriteria, size + 1)\r\n    if(winner) {\r\n      return {\r\n        result: currentPlayer,\r\n        line: winner\r\n      };\r\n    }\r\n\r\n    let checkRightDiag = Array<number>(size - Math.abs(col+row+1-size)).fill(0)\r\n    if(col + row < size - 1){\r\n      checkRightDiag = checkRightDiag.map((v,i)=> v = i * size + col - i + row)\r\n    } else {\r\n      checkRightDiag = checkRightDiag.map((v,i)=> v = (i + col + row - size + 2) * size - i - 1)\r\n    }\r\n    checkRightDiag = checkRightDiag.filter(n=>squares[n]===currentPlayer)\r\n\r\n    winner = hasConsecutive(checkRightDiag, winCriteria, size - 1)\r\n    if(winner) {\r\n      return {\r\n        result: currentPlayer,\r\n        line: winner\r\n      };\r\n    }\r\n\r\n    // check draw\r\n    if(squares.every(square=>square)){\r\n      return {\r\n        result: DRAW,\r\n        line: []\r\n      };\r\n    }\r\n    return undefined;\r\n}","import React from \"react\";\r\n\r\nconst Square: React.FC<SquareProp> = (props) => {\r\n    const renderValue = ()=>{\r\n      if(props.isHighlight){\r\n        return (\r\n          <mark>{props.value}</mark>\r\n        )\r\n      }\r\n      return props.value\r\n    }\r\n\r\n    return (\r\n      <button className=\"square\" onClick={props.onClick} key={props.id}>\r\n        {renderValue()}\r\n      </button>\r\n    );\r\n}\r\n\r\nexport default Square;","import Square from \"./Square\";\r\nimport React from \"react\";\r\n\r\nconst Board: React.FC<BoardProp> = (props) => {\r\n    const renderSquare = (row: number, col:number, size:number) =>  {\r\n      return (\r\n        <Square\r\n          id = {row*size+col}\r\n          value = {props.squares[row*size+col]}\r\n          onClick={() => props.onClick(row, col)}\r\n          isHighlight = {props.winner.includes(row*size+col)}\r\n        />\r\n      );\r\n    }\r\n\r\n    const generateRow = (row: number, size: number) => {\r\n      let rowData = Array(size).fill(null)\r\n      for (let col = 0; col < size; ++col) {\r\n          rowData[col] = renderSquare(row, col, size)\r\n      }\r\n      return rowData;\r\n    }\r\n\r\n    const generateBoard = (size: number) => {\r\n      let boardData = Array(size).fill(null)\r\n      for (let row = 0; row < size; ++row) {\r\n        boardData[row] = (\r\n          <div className=\"board-row\" key={row}>\r\n            {generateRow(row, size)}\r\n          </div>\r\n        )\r\n      }\r\n      return boardData;\r\n    }\r\n  \r\n    return (\r\n        <div>\r\n          {generateBoard(props.size)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;\r\n  ","import React, { useState } from \"react\";\r\n\r\nconst HistoryList: React.FC<HistoryListProp> = ({data, onSelect, selected})=>{\r\n\r\n    const [isReverse, setReverse] = useState(false)\r\n\r\n    const reverseMove = () => {\r\n        setReverse(\r\n          !isReverse\r\n        )\r\n    }\r\n\r\n    let moves = data.map((step) => {\r\n        const stepNumber = step.move.stepNumber\r\n        const position = step.move.position\r\n        const desc = stepNumber?\r\n            `Go to move #${stepNumber} (${position?.col}, ${position?.row})` :\r\n            'Go to game start';\r\n        return (\r\n            <li key={stepNumber}>\r\n            <button \r\n                onClick={()=>{\r\n                    onSelect(stepNumber)\r\n                }}\r\n                style = {stepNumber===selected?{fontWeight: \"bold\"}:{}}\r\n            >\r\n                    {desc}\r\n            </button>\r\n            </li>\r\n        );\r\n    });\r\n    if(isReverse){\r\n        moves = moves.reverse()\r\n    }\r\n    return (\r\n        <>\r\n            <button onClick={reverseMove}>\r\n                {`Change to ${isReverse?\"ascending\":\"descending\"} order`}\r\n            </button>\r\n            <ol>\r\n                {moves}\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HistoryList;","import React, { useState } from \"react\";\r\nimport { DRAW, PLAYER_O, PLAYER_X } from \"../constant\";\r\nimport { calculateWinner } from \"../util\";\r\nimport Board from \"./Board\";\r\nimport HistoryList from \"./HistoryList\";\r\n\r\n  \r\ntype GameState = {\r\n  stepNumber: number,\r\n  xIsNext: boolean\r\n}\r\n\r\nconst Game : React.FC<GameProp> = ({size, winCriteria}) => {\r\n    const [histories, setHistories] = useState<HistoryStep[]>([\r\n      {\r\n        move: {\r\n          squares: Array<string|null>(size*size).fill(null),\r\n          position: {\r\n            row: -1,\r\n            col: -1\r\n          },\r\n          stepNumber: 0\r\n        },\r\n        result: undefined\r\n      }\r\n    ]);\r\n\r\n    const [currentStep, setCurrentStep] = useState<GameState>({\r\n      stepNumber: 0,\r\n      xIsNext: true\r\n    });\r\n  \r\n    const handleClick = (row: number, col:number) => {\r\n      const modifiedHistories = histories.slice(0, currentStep.stepNumber+1);\r\n      const current = modifiedHistories.slice(-1)[0];\r\n      const squares = current.move.squares.slice();\r\n      let i = row * size + col;\r\n      if (current.result || squares[i]) {\r\n        return;\r\n      }\r\n      let currentPlayer = currentStep.xIsNext ? PLAYER_X : PLAYER_O;\r\n      squares[i] = currentPlayer;\r\n\r\n      let result = calculateWinner(squares, row, col, size, winCriteria)\r\n\r\n      setHistories(\r\n        [\r\n            ...modifiedHistories,\r\n            {\r\n              move: {\r\n                squares: squares,\r\n                position: {\r\n                  row: row,\r\n                  col: col\r\n                },\r\n                stepNumber: modifiedHistories.length++\r\n              },\r\n              result: result\r\n            } \r\n        ]\r\n      );\r\n      setCurrentStep({\r\n        stepNumber: modifiedHistories.length-1,\r\n        xIsNext: !currentStep.xIsNext\r\n      });\r\n    }\r\n  \r\n    const jumpTo = (step: number) => {\r\n      setCurrentStep({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0\r\n      });\r\n    }\r\n \r\n    let current = histories.find(history=>history.move.stepNumber===currentStep.stepNumber);\r\n    if(current===undefined){\r\n      current = histories.slice(-1)[0]\r\n    }\r\n    let status: string;\r\n    let winner : number[] = [];\r\n    const result = current.result;\r\n    if(result === undefined){\r\n      status = \"Next player: \" + (currentStep.xIsNext ? PLAYER_X : PLAYER_O);\r\n    }\r\n    else if (result.result === DRAW){\r\n      status = \"Draw\"\r\n    }\r\n    else {\r\n      status = \"Winner: \" + result.result;\r\n      winner = result.line;\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board\r\n              squares={current.move.squares}\r\n              size = {size}\r\n              onClick={(row:number, col:number) => handleClick(row, col)}\r\n              winner = {winner}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div> \r\n            <HistoryList \r\n              data={histories} \r\n              onSelect={jumpTo} \r\n              selected={currentStep.stepNumber}\r\n            />\r\n          </div>\r\n      </div>\r\n    );\r\n  \r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './component/Game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game size={10} winCriteria={5}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}